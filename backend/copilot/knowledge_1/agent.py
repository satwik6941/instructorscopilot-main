from google.adk.agents import LlmAgent, SequentialAgent, LoopAgent
from google.adk.tools import google_search
from pathlib import Path
import os

# File writing function (will be automatically wrapped as FunctionTool by ADK)
def write_to_file(file_path: str, content: str, mode: str = "a") -> dict:
    try:
        # Ensure the directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        with open(file_path, mode, encoding='utf-8') as file:
            file.write(content)
        
        return {
            "status": "success",
            "message": f"Successfully wrote content to {file_path}",
            "file_path": file_path,
            "mode": mode
        }
    except Exception as e:
        return {
            "status": "error", 
            "message": f"Error writing to file {file_path}: {str(e)}",
            "file_path": file_path,
            "error": str(e)
        }

# Helper function to get the proper file path
def get_output_file_path():
    """Get the proper file path for saving the deep course content"""
    project_root = Path(__file__).resolve().parents[2]
    file_path = project_root / "Inputs and Outputs" / "deep_agent_output.txt"
    return str(file_path)

# Read the planner agent instruction file
def read_planner_output():
    try:
        # Resolve project root: this file is at copilot/knowledge/agent.py -> go up 2 levels
        project_root = Path(__file__).resolve().parents[2]
        file_path = project_root / "Inputs and Outputs" / "plan_agent_output.txt"
        with file_path.open('r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        return "Planner agent output file not found. Please ensure the file exists at 'Inputs and Outputs/planner_agent_instruction.txt' under the project root."
    except Exception as e:
        return f"Error reading planner output file: {str(e)}"

# Get the content from the planner instruction file
planner_content = read_planner_output()

deep_course_content_Creator = LlmAgent(
    name = "DeepCourseContentCreator",
    model = "gemini-2.0-flash",
    tools = [write_to_file],  
    description = "A deep content creator agent that generates extremely comprehensive and detailed course materials week-by-week and saves them to a file.",
    instruction= f"""
You are an Expert Deep Course Content Creator Agent with 20+ years of experience in educational design. 
You transform basic course content into fully teachable, deeply elaborated week-by-week lessons.

INPUT:
You will be provided with the following course design specifications (from `plan_agent_output.txt`):
{planner_content}

YOUR MANDATE:
- Teach using a real-world-problem-first approach
- Each week should be a complete, stand-alone teaching unit
- Always connect new weeks to the knowledge from previous weeks
- Focus on rich explanations, not quizzes or flashcards
- Use BOTH your LLM intelligence and the Google Search tool to gather, verify, and integrate the **most accurate, current, and outstanding course content possible**
- **IMPORTANT: Save ALL generated content to a file using the write_to_file tool**

FILE SAVING INSTRUCTIONS:
- At the start of content generation, use write_to_file tool to create/overwrite the output file: 'Inputs and Outputs/deep_course_content_output.txt' with a course header
- After completing each week's content, use write_to_file tool with mode='a' to append that week's content to the file
- At the end, use write_to_file tool with mode='a' to append "DONE and DUSTED" to signal completion

WEEK-BY-WEEK PROCESS:
1. **FIRST**: Call write_to_file(file_path='Inputs and Outputs/deep_course_content_output.txt', content='Course Content Generated by DeepCourseContentCreator Agent\\n\\n', mode='w') to initialize the file
2. Identify the total number of weeks in the course
3. Start with Week 1 (or next incomplete week) and complete it fully
4. **After each week**: Call write_to_file(file_path='Inputs and Outputs/deep_course_content_output.txt', content=[week_content], mode='a') to append the week's content
5. After each week, output a HALT marker to pause for ~10 seconds before continuing

CONTENT STRUCTURE FOR EACH WEEK:
=== PROCESSING WEEK [NUMBER] ===

# Week [Number]: [Week Title] - From Real-World Problem to Solution

## üîó Connecting from Previous Weeks (if applicable)
Briefly recap what was covered before and explain how it links to this week's topic.

## üîç The Real-World Problem
- Describe a real scenario, challenge, or case study where the topic is relevant
- Explain why this problem matters and its real consequences

## üí° Introducing the Topic as the Solution
- Present the main concept for this week
- Explain how it solves the problem
- Highlight why this solution is better than alternatives

## üìö Deep Explanation
- Cover **all sub-classifications, definitions, and related concepts**
- Break down complex ideas into smaller steps
- Use analogies or relatable examples to improve understanding
- Show historical context if relevant
- Ensure explanations are enriched with **verified, up-to-date information from Google Search**

## üåü Practical Examples
- Provide 2‚Äì4 detailed, realistic examples
- Each example should explain the setup, steps, and outcomes

## üìñ Additional Case Studies (if possible)
- Provide 1‚Äì2 short real-world cases showing the concept in action

## üöÄ Looking Ahead
- Summarize key takeaways
- Explain how this week's content sets up the next week's learning

=== WEEK [NUMBER] COMPLETED ===

<Halt/Pause for 4 seconds>

WORKFLOW SUMMARY:
1. Start by calling write_to_file to create 'Inputs and Outputs/deep_course_content_output.txt' with course header (mode='w')
2. Generate each week's content fully using Google Search for enriched information
3. After each week, call write_to_file with mode='a' to append that week's content to the file
4. Continue until all weeks are complete
5. Finally, call write_to_file with mode='a' to append "\\n\\nDONE and DUSTED\\n" to signal completion

Begin every response with a heading saying "=== [DeepCourseContentCreator] ===

Important: After all weeks are completed, use write_to_file to append "DONE and DUSTED" to the file to signal that the course content has been fully elaborated into week-by-week lessons.
""",
    output_key="deep_content",
)

deep_content_loop = LoopAgent(
    name="deepcontentloop",
    sub_agents=[deep_course_content_Creator],
    description="A loop agent that refines and enhances the generated course content based on quality checks and saves output to file.",
    max_iterations=3,
)

root_agent = deep_content_loop